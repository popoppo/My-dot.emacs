#!/usr/local/bin/gosh

(use srfi-1)
(use dbi)
(use gauche.collection)
(use gauche.parseopt)
(use gauche.sequence)
(use text.csv)

(add-load-path ".")
(use stock-avgs)

(define (main args)
  (let-args (cdr args)
      ((code "c|code=i")
       (range "r|range=i")
       (from-date "f|from=s")
       (to-date "t|to=s")
       (week? "w|week")
       (file "file=s"))
      (when [or (and (not code) (not file)) (not range)]
            (print "code and range are needed.")
            (exit 1))
      (let ((codes (merge-codes file code))
            (conn (make-connection)))
        (map (cut exec conn <> range from-date to-date week?) codes)
        (dbi-close conn))))

(define (exec conn code range from-date to-date week?)
  (let ((data (extract-date-and-close 
               (select conn code :from from-date :to to-date :week? week?) week?))
        (ext (extract-date-and-close 
              (select conn code :to from-date :week? week? :limit (- range 1) :desc? #t) week?)))
    (let1 prices (map (cut second <>) (append (reverse ext) data))
        (output data (calc-bollingers prices range)))))

(define (output date-and-price prices)
  (map (lambda (dap price) 
         (print (car dap) " " (string-join (map number->string price) " ")))
       date-and-price prices))

(define (calc-bollingers data range)
  (do ((index range (+ 1 index))
       (result '()))
      ((> index (length data)) (reverse result))
    (set! result 
          (cons (calc-bollinger (subseq data (- index range) index)) 
                result))))

(define (calc-bollinger data)
  (let ((avg (avg data))
        (stddev (stddev data)))
    (map (cut exact->inexact <>)
         (list avg (+ avg stddev) (- avg stddev)
               (+ avg (* stddev 1.5)) (- avg (* stddev 1.5))
               (+ avg (* stddev 2)) (- avg (* stddev 2))))))

(define (stddev data)
  (let1 avg (avg data)
      (let1 sum (fold (lambda (d result)
                        (+ result (expt (- d avg) 2)))
                      0 data)
            (sqrt (/ sum (- (length data) 1))))))
